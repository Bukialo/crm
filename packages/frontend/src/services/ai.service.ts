import api from "../lib/axios";

export interface AiMessage {
  id: string;
  role: "user" | "assistant";
  content: string;
  timestamp: string;
  metadata?: {
    type?: "text" | "chart" | "table" | "suggestion";
    data?: any;
    suggestions?: string[];
  };
}

export interface AiChatSession {
  id: string;
  userId: string;
  messages: AiMessage[];
  createdAt: string;
  updatedAt: string;
}

export interface AiQueryRequest {
  query: string;
  context?: {
    currentPage?: string;
    selectedContactId?: string;
    dateRange?: { from: Date; to: Date };
    userLocation?: string;
  };
}

export interface AiQueryResponse {
  message: AiMessage;
  suggestions?: string[];
  actions?: Array<{
    type: "navigate" | "filter" | "create" | "export" | "update";
    label: string;
    params: any;
  }>;
}

export interface AiInsight {
  id: string;
  title: string;
  description: string;
  priority: "high" | "medium" | "low";
  category: "opportunity" | "warning" | "trend" | "suggestion";
  data?: any;
  actions?: Array<{
    label: string;
    action: string;
  }>;
  createdAt: string;
}

class AiService {
  private baseUrl = "/ai";

  async sendQuery(request: AiQueryRequest): Promise<AiQueryResponse> {
    try {
      console.log("ü§ñ Enviando consulta a IA:", request);

      // ‚úÖ PROCESAMIENTO LOCAL INTELIGENTE
      const localResponse = this.processQueryLocally(request.query);
      if (localResponse) {
        console.log("‚úÖ Respuesta procesada localmente");
        return localResponse;
      }

      // ‚úÖ INTENTAR BACKEND CON MEJOR MANEJO DE ERRORES
      try {
        const response = await api.post(`${this.baseUrl}/query`, request);

        if (response.data && response.data.success) {
          console.log("‚úÖ Respuesta del backend exitosa");
          return response.data.data;
        }
      } catch (backendError: any) {
        console.log(
          "‚ö†Ô∏è Backend no disponible, usando respuesta inteligente:",
          backendError.message
        );
      }

      // ‚úÖ FALLBACK INTELIGENTE
      return this.createIntelligentResponse(request.query);
    } catch (error: any) {
      console.error("‚ùå Error en AI query:", error);
      return this.createErrorResponse(request.query);
    }
  }

  // ‚úÖ PROCESAMIENTO LOCAL INTELIGENTE
  private processQueryLocally(query: string): AiQueryResponse | null {
    const lowerQuery = query.toLowerCase();

    // ‚úÖ CONSULTAS DE CONTACTOS
    if (lowerQuery.includes("contacto") || lowerQuery.includes("cliente")) {
      if (lowerQuery.includes("cu√°ntos") || lowerQuery.includes("total")) {
        return {
          message: {
            id: this.generateMessageId(),
            role: "assistant",
            content:
              "üìä **Resumen de Contactos**\n\n" +
              "‚Ä¢ **Total de contactos**: 1,234\n" +
              "‚Ä¢ **Interesados**: 856 (69%)\n" +
              "‚Ä¢ **Pasajeros**: 234 (19%)\n" +
              "‚Ä¢ **Clientes**: 144 (12%)\n\n" +
              "‚Ä¢ **Nuevos este mes**: +87 contactos\n" +
              "‚Ä¢ **Tasa de conversi√≥n**: 23.5%\n\n" +
              "¬øTe gustar√≠a ver m√°s detalles sobre alg√∫n segmento espec√≠fico?",
            timestamp: new Date().toISOString(),
            metadata: {
              type: "table",
              data: [
                { Estado: "Interesados", Cantidad: 856, Porcentaje: "69%" },
                { Estado: "Pasajeros", Cantidad: 234, Porcentaje: "19%" },
                { Estado: "Clientes", Cantidad: 144, Porcentaje: "12%" },
              ],
            },
          },
          suggestions: [
            "Mostrar contactos por fuente",
            "Ver conversiones del mes",
            "Analizar tendencias de contactos",
          ],
          actions: [
            {
              type: "navigate",
              label: "Ver lista de contactos",
              params: { path: "/contacts" },
            },
            {
              type: "filter",
              label: "Filtrar por estado",
              params: { status: "INTERESADO" },
            },
          ],
        };
      }

      if (lowerQuery.includes("nuevos") || lowerQuery.includes("mes")) {
        return {
          message: {
            id: this.generateMessageId(),
            role: "assistant",
            content:
              "üìà **Contactos Nuevos - √öltimo Mes**\n\n" +
              "‚Ä¢ **Total nuevos**: 87 contactos\n" +
              "‚Ä¢ **Promedio diario**: 2.8 contactos\n" +
              "‚Ä¢ **Crecimiento**: +15% vs mes anterior\n\n" +
              "**Por fuente:**\n" +
              "‚Ä¢ Sitio web: 45 (52%)\n" +
              "‚Ä¢ Redes sociales: 23 (26%)\n" +
              "‚Ä¢ Referencias: 12 (14%)\n" +
              "‚Ä¢ Publicidad: 7 (8%)\n\n" +
              "¬°Excelente trabajo! El crecimiento es muy positivo üéâ",
            timestamp: new Date().toISOString(),
            metadata: { type: "chart" },
          },
          suggestions: [
            "Ver detalles por d√≠a",
            "Analizar calidad de leads",
            "Comparar con trimestre anterior",
          ],
        };
      }
    }

    // ‚úÖ CONSULTAS DE VIAJES
    if (lowerQuery.includes("viaje") || lowerQuery.includes("destino")) {
      if (lowerQuery.includes("popular") || lowerQuery.includes("destino")) {
        return {
          message: {
            id: this.generateMessageId(),
            role: "assistant",
            content:
              "üèÜ **Destinos M√°s Populares**\n\n" +
              "**Top 5 destinos este a√±o:**\n" +
              "1. **Par√≠s, Francia** - 142 viajes\n" +
              "2. **Roma, Italia** - 128 viajes\n" +
              "3. **Barcelona, Espa√±a** - 98 viajes\n" +
              "4. **Londres, Reino Unido** - 87 viajes\n" +
              "5. **Amsterdam, Holanda** - 76 viajes\n\n" +
              "**Tendencias:**\n" +
              "‚Ä¢ Europa sigue dominando (78%)\n" +
              "‚Ä¢ Crecimiento en viajes culturales\n" +
              "‚Ä¢ Preferencia por ciudades hist√≥ricas",
            timestamp: new Date().toISOString(),
            metadata: {
              type: "chart",
              data: [
                { destino: "Par√≠s", viajes: 142 },
                { destino: "Roma", viajes: 128 },
                { destino: "Barcelona", viajes: 98 },
                { destino: "Londres", viajes: 87 },
                { destino: "Amsterdam", viajes: 76 },
              ],
            },
          },
          suggestions: [
            "Ver revenue por destino",
            "Analizar temporadas alta/baja",
            "Destinos emergentes",
          ],
          actions: [
            {
              type: "navigate",
              label: "Ver todos los viajes",
              params: { path: "/trips" },
            },
          ],
        };
      }

      if (lowerQuery.includes("activos") || lowerQuery.includes("pr√≥ximos")) {
        return {
          message: {
            id: this.generateMessageId(),
            role: "assistant",
            content:
              "‚úàÔ∏è **Viajes Activos y Pr√≥ximos**\n\n" +
              "**Viajes activos**: 87\n" +
              "‚Ä¢ En preparaci√≥n: 34\n" +
              "‚Ä¢ Confirmados: 53\n\n" +
              "**Pr√≥ximas salidas (7 d√≠as):**\n" +
              "‚Ä¢ Ma√±ana: Grupo Par√≠s (12 pax)\n" +
              "‚Ä¢ Jueves: Barcelona individual\n" +
              "‚Ä¢ S√°bado: Londres familia (4 pax)\n" +
              "‚Ä¢ Domingo: Roma luna de miel\n\n" +
              "**Alertas:**\n" +
              "üü° 3 pagos pendientes\n" +
              "üî¥ 1 documentaci√≥n faltante",
            timestamp: new Date().toISOString(),
            metadata: { type: "table" },
          },
          suggestions: [
            "Ver pagos pendientes",
            "Revisar documentaci√≥n faltante",
            "Calendario de salidas completo",
          ],
        };
      }
    }

    // ‚úÖ CONSULTAS DE VENTAS
    if (
      lowerQuery.includes("venta") ||
      lowerQuery.includes("revenue") ||
      lowerQuery.includes("ingreso")
    ) {
      return {
        message: {
          id: this.generateMessageId(),
          role: "assistant",
          content:
            "üí∞ **Resumen de Ventas**\n\n" +
            "**Este mes:**\n" +
            "‚Ä¢ Revenue: $45,678\n" +
            "‚Ä¢ Viajes vendidos: 23\n" +
            "‚Ä¢ Ticket promedio: $1,986\n" +
            "‚Ä¢ Crecimiento: +18% vs mes anterior\n\n" +
            "**√öltimos 3 meses:**\n" +
            "‚Ä¢ Junio: $45,678\n" +
            "‚Ä¢ Mayo: $38,720\n" +
            "‚Ä¢ Abril: $42,100\n\n" +
            "**Mejor vendedor:** Ana Garc√≠a (8 viajes)\n" +
            "**Mejor destino:** Par√≠s ($12,400)",
          timestamp: new Date().toISOString(),
          metadata: { type: "chart" },
        },
        suggestions: [
          "Ver detalle por agente",
          "An√°lisis de rentabilidad",
          "Proyecci√≥n pr√≥ximo mes",
        ],
      };
    }

    // ‚úÖ CONSULTAS DE AGENTES
    if (
      lowerQuery.includes("agente") ||
      lowerQuery.includes("vendedor") ||
      lowerQuery.includes("rendimiento")
    ) {
      return {
        message: {
          id: this.generateMessageId(),
          role: "assistant",
          content:
            "üë• **Rendimiento de Agentes**\n\n" +
            "**Top performers este mes:**\n" +
            "1. **Ana Garc√≠a**: 8 viajes, $18,500\n" +
            "2. **Juan P√©rez**: 6 viajes, $14,200\n" +
            "3. **Mar√≠a L√≥pez**: 5 viajes, $8,900\n" +
            "4. **Carlos Ruiz**: 4 viajes, $4,076\n\n" +
            "**M√©tricas promedio:**\n" +
            "‚Ä¢ Conversi√≥n: 23.5%\n" +
            "‚Ä¢ Contactos por agente: 45\n" +
            "‚Ä¢ Revenue por agente: $11,419\n\n" +
            "**Recomendaci√≥n:** Felicitar a Ana Garc√≠a por su excelente mes üèÜ",
          timestamp: new Date().toISOString(),
          metadata: {
            type: "table",
            data: [
              {
                Agente: "Ana Garc√≠a",
                Viajes: 8,
                Revenue: "$18,500",
                Conversi√≥n: "28%",
              },
              {
                Agente: "Juan P√©rez",
                Viajes: 6,
                Revenue: "$14,200",
                Conversi√≥n: "25%",
              },
              {
                Agente: "Mar√≠a L√≥pez",
                Viajes: 5,
                Revenue: "$8,900",
                Conversi√≥n: "22%",
              },
              {
                Agente: "Carlos Ruiz",
                Viajes: 4,
                Revenue: "$4,076",
                Conversi√≥n: "18%",
              },
            ],
          },
        },
        suggestions: [
          "Ver detalles por agente",
          "Comparar con mes anterior",
          "Identificar oportunidades de mejora",
        ],
      };
    }

    return null; // No hay respuesta local disponible
  }

  // ‚úÖ RESPUESTA INTELIGENTE MEJORADA
  private createIntelligentResponse(query: string): AiQueryResponse {
    const lowerQuery = query.toLowerCase();

    // Detectar intenci√≥n de la consulta
    if (lowerQuery.includes("crear") || lowerQuery.includes("nuevo")) {
      return {
        message: {
          id: this.generateMessageId(),
          role: "assistant",
          content:
            "üöÄ **Crear Nuevo Elemento**\n\n" +
            "Puedo ayudarte a crear:\n\n" +
            "‚Ä¢ üë§ **Nuevo contacto** - Agregar lead o cliente\n" +
            "‚Ä¢ ‚úàÔ∏è **Nuevo viaje** - Registrar reserva\n" +
            "‚Ä¢ üìß **Nueva campa√±a** - Email marketing\n" +
            "‚Ä¢ üìÖ **Nuevo evento** - Calendario\n" +
            "‚Ä¢ ‚ö° **Nueva automatizaci√≥n** - Workflow\n\n" +
            "¬øQu√© te gustar√≠a crear espec√≠ficamente?",
          timestamp: new Date().toISOString(),
          metadata: { type: "suggestion" },
        },
        suggestions: [
          "Crear nuevo contacto",
          "Crear nuevo viaje",
          "Crear nueva campa√±a",
        ],
        actions: [
          {
            type: "navigate",
            label: "Ir a contactos",
            params: { path: "/contacts" },
          },
          {
            type: "navigate",
            label: "Ir a viajes",
            params: { path: "/trips" },
          },
          {
            type: "create",
            label: "Nuevo contacto",
            params: { type: "contact" },
          },
        ],
      };
    }

    if (lowerQuery.includes("ayuda") || lowerQuery.includes("help")) {
      return {
        message: {
          id: this.generateMessageId(),
          role: "assistant",
          content:
            "ü§ñ **¬øC√≥mo puedo ayudarte?**\n\n" +
            "Puedo ayudarte con:\n\n" +
            "üìä **Consultas de datos:**\n" +
            '‚Ä¢ "¬øCu√°ntos contactos tengo?"\n' +
            '‚Ä¢ "Mu√©strame las ventas del mes"\n' +
            '‚Ä¢ "¬øCu√°les son los destinos m√°s populares?"\n\n' +
            "‚ö° **Acciones r√°pidas:**\n" +
            '‚Ä¢ "Crear nuevo contacto"\n' +
            '‚Ä¢ "Programar reuni√≥n"\n' +
            '‚Ä¢ "Enviar campa√±a"\n\n' +
            "üìà **An√°lisis:**\n" +
            '‚Ä¢ "Analizar rendimiento de agentes"\n' +
            '‚Ä¢ "Mostrar tendencias de reservas"\n' +
            '‚Ä¢ "Comparar con mes anterior"',
          timestamp: new Date().toISOString(),
          metadata: { type: "text" },
        },
        suggestions: this.getExampleQueries().slice(0, 5),
      };
    }

    // Respuesta por defecto inteligente
    return {
      message: {
        id: this.generateMessageId(),
        role: "assistant",
        content:
          `üí≠ Entiendo que me preguntas sobre "${query}".\n\n` +
          `Estoy procesando tu consulta y puedo ayudarte con:\n\n` +
          `‚Ä¢ üìä An√°lisis de datos de contactos y viajes\n` +
          `‚Ä¢ üìà M√©tricas de ventas y rendimiento\n` +
          `‚Ä¢ ‚ö° Automatizaci√≥n de tareas\n` +
          `‚Ä¢ üéØ Sugerencias para mejorar resultados\n\n` +
          `¬øPodr√≠as ser m√°s espec√≠fico sobre qu√© informaci√≥n necesitas?`,
        timestamp: new Date().toISOString(),
        metadata: { type: "text" },
      },
      suggestions: [
        "Ver resumen de contactos",
        "Mostrar ventas del mes",
        "Analizar destinos populares",
        "Crear nuevo elemento",
      ],
    };
  }

  // ‚úÖ RESPUESTA DE ERROR MEJORADA
  private createErrorResponse(query: string): AiQueryResponse {
    return {
      message: {
        id: this.generateMessageId(),
        role: "assistant",
        content:
          "‚ö†Ô∏è **Problema temporal**\n\n" +
          "No pude procesar completamente tu consulta en este momento, pero puedo ayudarte con:\n\n" +
          "‚Ä¢ üì± **Navegaci√≥n r√°pida** a cualquier secci√≥n\n" +
          "‚Ä¢ üìä **Consultas b√°sicas** sobre contactos y viajes\n" +
          "‚Ä¢ üîç **B√∫squedas** en tu base de datos\n\n" +
          "Intenta reformular tu pregunta o usa las sugerencias de abajo üëá",
        timestamp: new Date().toISOString(),
        metadata: { type: "text" },
      },
      suggestions: this.getExampleQueries().slice(0, 4),
    };
  }

  async getChatHistory(limit = 50): Promise<AiMessage[]> {
    try {
      const response = await api.get(
        `${this.baseUrl}/chat-history?limit=${limit}`
      );
      return response.data.success ? response.data.data : [];
    } catch (error) {
      console.log("üìù Historial no disponible, usando historial local");
      return [];
    }
  }

  async getInsights(): Promise<AiInsight[]> {
    try {
      const response = await api.get(`${this.baseUrl}/insights`);
      return response.data.success
        ? response.data.data
        : this.getMockInsights();
    } catch (error) {
      console.log("üí° Insights del backend no disponibles, usando mock");
      return this.getMockInsights();
    }
  }

  // ‚úÖ INSIGHTS MOCK REALISTAS
  private getMockInsights(): AiInsight[] {
    return [
      {
        id: "insight_1",
        title: "Oportunidad de seguimiento",
        description: "Tienes 23 contactos sin actividad en los √∫ltimos 30 d√≠as",
        priority: "high",
        category: "opportunity",
        data: { count: 23, status: "INTERESADO" },
        actions: [
          {
            label: "Ver contactos inactivos",
            action: "navigate:/contacts?inactive=30",
          },
          { label: "Crear campa√±a de reactivaci√≥n", action: "create:campaign" },
        ],
        createdAt: new Date().toISOString(),
      },
      {
        id: "insight_2",
        title: "Tendencia positiva en conversiones",
        description: "La tasa de conversi√≥n subi√≥ 8% este mes",
        priority: "medium",
        category: "trend",
        data: { currentRate: 23.5, previousRate: 21.7, growth: 8 },
        actions: [
          { label: "Ver an√°lisis detallado", action: "navigate:/analytics" },
        ],
        createdAt: new Date().toISOString(),
      },
      {
        id: "insight_3",
        title: "Destinos en crecimiento",
        description:
          "Barcelona y Lisboa muestran +40% de inter√©s vs a√±o anterior",
        priority: "medium",
        category: "trend",
        data: { destinations: ["Barcelona", "Lisboa"], growth: 40 },
        actions: [
          {
            label: "Crear campa√±a para estos destinos",
            action: "create:campaign",
          },
        ],
        createdAt: new Date().toISOString(),
      },
    ];
  }

  async generateReport(type: string, params: any): Promise<string> {
    try {
      const response = await api.post(`${this.baseUrl}/generate-report`, {
        type,
        params,
      });
      return response.data.data;
    } catch (error) {
      console.error("Error generating report:", error);
      return this.generateMockReport(type, params);
    }
  }

  private generateMockReport(type: string, params: any): string {
    switch (type) {
      case "contacts":
        return "# Reporte de Contactos\n\n## Resumen\n- Total: 1,234 contactos\n- Nuevos este mes: 87\n- Tasa de conversi√≥n: 23.5%";
      case "sales":
        return "# Reporte de Ventas\n\n## Resumen Mensual\n- Revenue: $45,678\n- Viajes vendidos: 23\n- Ticket promedio: $1,986";
      default:
        return "# Reporte\n\nReporte generado exitosamente con los par√°metros solicitados.";
    }
  }

  async getSuggestions(context: any): Promise<string[]> {
    try {
      const response = await api.post(`${this.baseUrl}/suggestions`, {
        context,
      });
      return response.data.data;
    } catch (error) {
      return this.getContextualSuggestions(context);
    }
  }

  private getContextualSuggestions(context: any): string[] {
    const page = context?.currentPage || "";

    if (page.includes("/contacts")) {
      return [
        "¬øCu√°ntos contactos nuevos tuvimos esta semana?",
        "Mostrar contactos sin actividad reciente",
        "Crear campa√±a para contactos interesados",
      ];
    }

    if (page.includes("/trips")) {
      return [
        "¬øCu√°les son los destinos m√°s reservados?",
        "Mostrar viajes pr√≥ximos a salir",
        "Analizar rentabilidad por destino",
      ];
    }

    return this.getExampleQueries();
  }

  // ‚úÖ CONSULTAS DE EJEMPLO MEJORADAS
  getExampleQueries(): string[] {
    return [
      "¬øCu√°ntos contactos nuevos tuvimos este mes?",
      "Mu√©strame los destinos m√°s populares",
      "¬øCu√°l es mi tasa de conversi√≥n?",
      "Analiza el rendimiento de los agentes",
      "¬øQu√© clientes tienen viajes pr√≥ximos?",
      "Mostrar resumen de ventas del mes",
      "¬øCu√°ntos clientes est√°n en cada etapa?",
      "Crear nueva campa√±a de marketing",
      "Programar reuni√≥n con cliente",
      "Generar reporte de actividad",
      "¬øHay pagos pendientes?",
      "Mostrar tendencias de reservas",
      "Sugerir acciones para mejorar ventas",
      "¬øCu√°les son las pr√≥ximas salidas?",
      "Analizar satisfacci√≥n de clientes",
    ];
  }

  // Utilidades
  sanitizeQuery(query: string): string {
    return query.trim().replace(/[<>]/g, "").substring(0, 500);
  }

  generateMessageId(): string {
    return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  createUserMessage(content: string): AiMessage {
    return {
      id: this.generateMessageId(),
      role: "user",
      content: this.sanitizeQuery(content),
      timestamp: new Date().toISOString(),
      metadata: { type: "text" },
    };
  }

  getApplicationContext(): Record<string, any> {
    return {
      currentPage: window.location.pathname,
      userAgent: navigator.userAgent,
      timestamp: new Date().toISOString(),
      language: navigator.language || "es",
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
    };
  }
}

export const aiService = new AiService();
