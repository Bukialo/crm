generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  email            String          @unique
  firebaseUid      String          @unique
  firstName        String
  lastName         String
  role             UserRole        @default(AGENT)
  avatar           String?
  phone            String?
  isActive         Boolean         @default(true)
  lastLogin        DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  timezone         String          @default("UTC")
  activities       Activity[]
  CalendarEvent    CalendarEvent[]
  assignedContacts Contact[]       @relation("AssignedAgent")
  createdContacts  Contact[]       @relation("CreatedBy")
  tasks            Task[]

  @@index([email])
  @@index([firebaseUid])
}

model Contact {
  id                    String               @id @default(cuid())
  firstName             String
  lastName              String
  email                 String               @unique
  phone                 String?
  birthDate             DateTime?
  status                ContactStatus        @default(INTERESADO)
  preferredDestinations String[]
  budgetRange           BudgetRange?
  travelStyle           TravelStyle[]
  groupSize             Int?
  preferredSeasons      String[]
  lastContact           DateTime?
  nextFollowUp          DateTime?
  assignedAgentId       String?
  tags                  String[]
  source                ContactSource        @default(WEBSITE)
  referralSource        String?
  createdById           String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  activities            Activity[]
  CalendarEvent         CalendarEvent[]
  campaignRecipients    CampaignRecipient[]
  assignedAgent         User?                @relation("AssignedAgent", fields: [assignedAgentId], references: [id])
  createdBy             User?                @relation("CreatedBy", fields: [createdById], references: [id])
  customFields          ContactCustomField[]
  notes                 ContactNote[]
  documents             Document[]
  tasks                 Task[]
  trips                 Trip[]

  @@index([email])
  @@index([status])
  @@index([assignedAgentId])
  @@index([nextFollowUp])
}

model ContactNote {
  id          String   @id @default(cuid())
  contactId   String
  content     String
  isImportant Boolean  @default(false)
  createdById String
  createdAt   DateTime @default(now())
  contact     Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@index([contactId])
}

model Trip {
  id                String          @id @default(cuid())
  contactId         String
  destination       String
  departureDate     DateTime
  returnDate        DateTime
  travelers         Int
  status            TripStatus      @default(QUOTE)
  estimatedBudget   Float
  finalPrice        Float?
  commission        Float?
  commissionPaid    Boolean         @default(false)
  includesFlight    Boolean         @default(false)
  includesHotel     Boolean         @default(false)
  includesTransfer  Boolean         @default(false)
  includesTours     Boolean         @default(false)
  includesInsurance Boolean         @default(false)
  customServices    String[]
  quoteDate         DateTime        @default(now())
  bookingDate       DateTime?
  paymentDueDate    DateTime?
  notes             String?
  internalNotes     String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  activities        Activity[]
  CalendarEvent     CalendarEvent[]
  documents         Document[]
  payments          Payment[]
  contact           Contact         @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@index([contactId])
  @@index([status])
  @@index([departureDate])
}

model Campaign {
  id                   String              @id @default(cuid())
  name                 String
  type                 CampaignType
  status               CampaignStatus      @default(DRAFT)
  targetCriteria       Json
  subject              String?
  content              String
  templateId           String?
  useAiPersonalization Boolean             @default(false)
  scheduledDate        DateTime?
  sentDate             DateTime?
  timezone             String              @default("UTC")
  recipientCount       Int                 @default(0)
  sentCount            Int                 @default(0)
  openCount            Int                 @default(0)
  clickCount           Int                 @default(0)
  conversionCount      Int                 @default(0)
  createdById          String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  template             EmailTemplate?      @relation(fields: [templateId], references: [id])
  recipients           CampaignRecipient[]

  @@index([status])
  @@index([scheduledDate])
}

model CampaignRecipient {
  id                  String    @id @default(cuid())
  campaignId          String
  contactId           String
  sent                Boolean   @default(false)
  sentAt              DateTime?
  opened              Boolean   @default(false)
  openedAt            DateTime?
  clicked             Boolean   @default(false)
  clickedAt           DateTime?
  converted           Boolean   @default(false)
  convertedAt         DateTime?
  personalizedContent String?
  createdAt           DateTime  @default(now())
  campaign            Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact             Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([campaignId, contactId])
  @@index([contactId])
}

model EmailTemplate {
  id                String     @id @default(cuid())
  name              String
  category          String
  subject           String
  htmlContent       String
  textContent       String?
  variables         Json
  aiPersonalization Json?
  isActive          Boolean    @default(true)
  usageCount        Int        @default(0)
  createdById       String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  campaigns         Campaign[]

  @@index([category])
}

model Automation {
  id                String                @id @default(cuid())
  name              String
  description       String?
  isActive          Boolean               @default(true)
  triggerType       AutomationTriggerType
  triggerConditions Json
  createdById       String
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  actions           AutomationAction[]
  executions        AutomationExecution[]

  @@index([isActive])
  @@index([triggerType])
}

model AutomationAction {
  id           String               @id @default(cuid())
  automationId String
  actionType   AutomationActionType
  parameters   Json
  delayMinutes Int                  @default(0)
  order        Int
  createdAt    DateTime             @default(now())
  automation   Automation           @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@index([automationId])
}

model AutomationExecution {
  id              String     @id @default(cuid())
  automationId    String
  triggeredBy     Json
  status          String
  error           String?
  startedAt       DateTime   @default(now())
  completedAt     DateTime?
  actionsExecuted Json[]
  automation      Automation @relation(fields: [automationId], references: [id])

  @@index([automationId])
  @@index([status])
  @@index([startedAt])
}

model CalendarEvent {
  id              String    @id @default(cuid())
  title           String
  description     String?
  type            EventType
  startDate       DateTime
  endDate         DateTime
  allDay          Boolean   @default(false)
  timezone        String    @default("UTC")
  contactId       String?
  tripId          String?
  assignedToId    String
  aiGenerated     Boolean   @default(false)
  aiSuggestions   String[]
  reminderMinutes Int[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  assignedTo      User      @relation(fields: [assignedToId], references: [id])
  contact         Contact?  @relation(fields: [contactId], references: [id])
  trip            Trip?     @relation(fields: [tripId], references: [id])

  @@index([assignedToId])
  @@index([contactId])
  @@index([startDate])
  @@index([type])
}

model Task {
  id           String       @id @default(cuid())
  title        String
  description  String?
  status       TaskStatus   @default(PENDING)
  priority     TaskPriority @default(MEDIUM)
  assignedToId String
  contactId    String?
  dueDate      DateTime?
  completedAt  DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  assignedTo   User         @relation(fields: [assignedToId], references: [id])
  contact      Contact?     @relation(fields: [contactId], references: [id])

  @@index([assignedToId])
  @@index([status])
  @@index([dueDate])
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  description String
  metadata    Json?
  userId      String
  contactId   String?
  tripId      String?
  createdAt   DateTime @default(now())
  contact     Contact? @relation(fields: [contactId], references: [id])
  trip        Trip?    @relation(fields: [tripId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([contactId])
  @@index([type])
  @@index([createdAt])
}

model Document {
  id           String   @id @default(cuid())
  name         String
  type         String
  url          String
  size         Int
  mimeType     String
  contactId    String?
  tripId       String?
  uploadedById String
  createdAt    DateTime @default(now())
  contact      Contact? @relation(fields: [contactId], references: [id])
  trip         Trip?    @relation(fields: [tripId], references: [id])

  @@index([contactId])
  @@index([tripId])
}

model Payment {
  id            String    @id @default(cuid())
  tripId        String
  amount        Float
  currency      String    @default("USD")
  method        String
  status        String
  transactionId String?
  receipt       String?
  paidAt        DateTime?
  createdAt     DateTime  @default(now())
  trip          Trip      @relation(fields: [tripId], references: [id])

  @@index([tripId])
  @@index([status])
}

model ContactCustomField {
  id         String   @id @default(cuid())
  contactId  String
  fieldName  String
  fieldValue String
  fieldType  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  contact    Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([contactId, fieldName])
  @@index([contactId])
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  updatedById String
  updatedAt   DateTime @updatedAt

  @@index([key])
}

enum ContactStatus {
  INTERESADO
  PASAJERO
  CLIENTE
}

enum BudgetRange {
  LOW
  MEDIUM
  HIGH
  LUXURY
}

enum TravelStyle {
  ADVENTURE
  RELAXATION
  CULTURAL
  BUSINESS
  LUXURY
  FAMILY
  ROMANTIC
}

enum ContactSource {
  WEBSITE
  REFERRAL
  SOCIAL_MEDIA
  ADVERTISING
  DIRECT
  PARTNER
  OTHER
}

enum TripStatus {
  QUOTE
  BOOKED
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum CampaignType {
  EMAIL
  SMS
  WHATSAPP
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
}

enum EventType {
  CLIENT_MEETING
  TRIP_DEPARTURE
  TRIP_RETURN
  FOLLOW_UP_CALL
  PAYMENT_DUE
  SEASONAL_CAMPAIGN
  TASK
  OTHER
}

enum AutomationTriggerType {
  CONTACT_CREATED
  TRIP_QUOTE_REQUESTED
  PAYMENT_OVERDUE
  TRIP_COMPLETED
  NO_ACTIVITY_30_DAYS
  SEASONAL_OPPORTUNITY
  BIRTHDAY
  CUSTOM
}

enum AutomationActionType {
  SEND_EMAIL
  CREATE_TASK
  SCHEDULE_CALL
  ADD_TAG
  UPDATE_STATUS
  GENERATE_QUOTE
  ASSIGN_AGENT
  SEND_WHATSAPP
}

enum UserRole {
  ADMIN
  MANAGER
  AGENT
  VIEWER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
