# Dockerfile para Frontend React
# Etapa de construcción
FROM node:18-alpine AS builder

# Establecer directorio de trabajo
WORKDIR /app

# Copiar archivos de configuración del workspace
COPY package*.json ./
COPY tsconfig.json ./

# Copiar shared package
COPY packages/shared ./packages/shared

# Copiar frontend package
COPY packages/frontend ./packages/frontend

# Instalar dependencias
RUN npm ci

# Construir shared package
WORKDIR /app/packages/shared
RUN npm run build

# Construir frontend
WORKDIR /app/packages/frontend
RUN npm run build

# Verificar que el build existe
RUN ls -la dist/

# Etapa de producción con nginx
FROM nginx:alpine AS production

# Instalar curl para health checks
RUN apk add --no-cache curl

# Copiar configuración personalizada de nginx
COPY docker/nginx.conf /etc/nginx/nginx.conf

# Copiar archivos estáticos construidos
COPY --from=builder /app/packages/frontend/dist /usr/share/nginx/html

# Crear usuario no-root
RUN addgroup -g 1001 -S nginx-user \
    && adduser -S nginx-user -u 1001 -G nginx-user

# Establecer permisos correctos
RUN chown -R nginx-user:nginx-user /usr/share/nginx/html \
    && chown -R nginx-user:nginx-user /var/cache/nginx \
    && chown -R nginx-user:nginx-user /var/log/nginx \
    && chown -R nginx-user:nginx-user /etc/nginx/conf.d \
    && touch /var/run/nginx.pid \
    && chown -R nginx-user:nginx-user /var/run/nginx.pid

# Cambiar al usuario no-root
USER nginx-user

# Exponer puerto
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80 || exit 1

# Comando de inicio
CMD ["nginx", "-g", "daemon off;"]